;
; (c) 2013-2020 parasim inc
; (c) 2010-2020 california institute of technology
; all rights reserved
;
; Author(s): Lijun Zhu

; the cascaded static/kinematic uoᴉsɹǝʌuᴉ

; the application
slipmodel:

    ; the model
    model = altar.models.seismic.cuda.cascaded
    model:
        ; the path of input files
        case = 9patch

        patches = 9 ; Nas*Ndd (along strike/down dip)

        ; parameters to be simulated
        ; provide a list at first, serving as their orders in theta
        psets_list = [strikeslip, dipslip, risetime, rupturevelocity, hypocenter]

        ; define each parameterset
        psets:
            strikeslip = altar.cuda.models.parameterset
            dipslip = altar.cuda.models.parameterset
            risetime = altar.cuda.models.parameterset
            rupturevelocity = altar.cuda.models.parameterset
            hypocenter = altar.cuda.models.parameterset

            ; variables for patches are arranged along dip direction at first [Nas][Ndd]
            strikeslip:
                count = {slipmodel.model.patches}
                prep = altar.cuda.distributions.preset ; load preset samples
                prep.input_file = theta_cascaded.h5 ; file name
                prep.dataset = ParameterSets/strikeslip ; dataset name in h5
                prior = altar.cuda.distributions.gaussian
                prior.mean = 0
                prior.sigma = 0.5

            dipslip:
                count = {slipmodel.model.patches}
                prep = altar.cuda.distributions.preset
                prep.input_file = theta_cascaded.h5 ; file name
                prep.dataset = ParameterSets/dipslip ; dataset name in h5
                prior = altar.cuda.distributions.uniform
                prior.support = (-0.5, 20.0)

            risetime:
                count = {slipmodel.model.patches}
                prior = altar.cuda.distributions.uniform
                prior.support = (10.0, 30.0)

            rupturevelocity:
                count = {slipmodel.model.patches}
                prior = altar.cuda.distributions.uniform
                prior.support= (1.0, 6.0)

            ; along strike(first), dip directions
            ; could be separated into 2 for dip and strike direction
            hypocenter:
                count = 2
                prior = altar.cuda.distributions.gaussian
                prior.mean = 20.0
                prior.sigma = 5.0

        ; the model ensemble
        models:
            static = altar.models.seismic.cuda.static
            kinematic = altar.models.seismic.cuda.kinematicg

            static:
                cascaded = True
                case = {slipmodel.model.case}

                ; parameters to be simulated
                ; just take a subset from master model psets
                psets_list = [strikeslip, dipslip]

                dataobs = altar.cuda.data.datal2
                dataobs:
                    observations = 108
                    data_file = static.data.h5
                    cd_file = static.Cd.h5

                ; fixed model parameters
                green = static.gf.h5
                ; patches are provided by the total number of parameters/2

            kinematic:
                cascaded = False ; default
                case =  {slipmodel.model.case}
                psets_list = [strikeslip, dipslip, risetime, rupturevelocity, hypocenter]

                dataobs:
                    observations = 14148
                    data_file = kinematicG.data.h5
                    cd_std = 5.0e-3

                ; fixed model parameters
                ; green's function (2*Ndd*Nas*Nt, observations)
                ; [Nt][2(strike/dip)][Nas][Ndd] with leading dimensions on the right
                green = kinematicG.gf.h5

                Ndd = 3 ; patches along dipslip
                Nas = 3 ; patches along strikeslip
                Nmesh = 30 ; mesh points for each patch
                dsp = 20.0 ; length for each patch, km
                Nt = 90 ; number of time intervals
                Npt = 2 ; mesh points for each time interval
                dt = 1.0 ; time unit for each interval, second
                ; initial starting time for each patch
                t0s = [0.0] * {slipmodel.model.patches}

    ; controller/annealer
    controller:
        sampler = altar.cuda.bayesian.metropolis
        archiver:
            output_dir = results/cascaded ; results output directory
            output_freq = 3 ; output frequency of annealing steps
        scheduler:
            dbeta_solver_method = gsl

    monitors:
        prof = altar.bayesian.profiler

    ; run configuration
    job.tasks = 1 ; number of tasks per host
    job.gpus = 1  ; number of gpus per task/thread
    ;job.gpuids = [0 0 1 ] ; gpu slots to be occupied
    job.gpuprecision = float64 ; desired precision for gpu (float64 or float32)
    job.chains = 2**10 ; number of chains per task
    job.steps = 500

    ; shell
    ; shell = mpi.shells.mpirun ; for running with mpi


; for parallel runs
; mpi.shells.mpirun # altar.plexus.shell:
    ;extra = -mca btl self,tcp

; end of file
